{
  "A-STAR": [
    {
      "description": "Test for A-STAR on test_case_2.txt state space with test_case_2_heuristic.txt heuristic",
      "execution_args": "--ss test_case_2.txt --alg astar --h test_case_2_heuristic.txt",
      "expected_output_fields": {
        "FOUND_SOLUTION": {
          "match": "exact",
          "value": "yes"
        },
        "PATH": {
          "match": "ignored",
          "value": "A => H => Z"
        },
        "PATH_LENGTH": {
          "match": "ignored",
          "value": "3"
        },
        "STATES_VISITED": {
          "match": "ignored",
          "value": "15"
        },
        "TOTAL_COST": {
          "match": "exact",
          "value": "90.0"
        }
      },
      "name": "A-STAR test_case_2_heuristic.txt"
    }
  ],
  "BFS": [
    {
      "description": "Test for BFS on test_case_2.txt state space",
      "execution_args": "--ss test_case_2.txt --alg bfs",
      "expected_output_fields": {
        "FOUND_SOLUTION": {
          "match": "exact",
          "value": "yes"
        },
        "PATH": {
          "match": "exact",
          "value": "A => H => Z"
        },
        "PATH_LENGTH": {
          "match": "exact",
          "value": "3"
        },
        "STATES_VISITED": {
          "match": "exact",
          "value": "11"
        },
        "TOTAL_COST": {
          "match": "exact",
          "value": "90.0"
        }
      },
      "name": "BFS"
    }
  ],
  "HEURISTIC-CONSISTENT": [
    {
      "description": "Test for checking if test_case_2_heuristic.txt heuristic is consistent",
      "execution_args": "--ss test_case_2.txt --h test_case_2_heuristic.txt --check-consistent ",
      "expected_output_fields": {
        "CONCLUSION": {
          "match": "exact",
          "value": "Heuristic is consistent."
        },
        "CONDITIONS": {
          "match": "contained",
          "value": [
            "[OK] h(A) <= h(F) + c: 7.0 <= 14.0 + 14.0",
            "[OK] h(A) <= h(H) + c: 7.0 <= 7.0 + 7.0",
            "[OK] h(A) <= h(J) + c: 7.0 <= 31.0 + 31.0",
            "[OK] h(B) <= h(C) + c: 19.0 <= 22.0 + 26.0",
            "[OK] h(B) <= h(H) + c: 19.0 <= 7.0 + 19.0",
            "[OK] h(B) <= h(M) + c: 19.0 <= 28.0 + 29.0",
            "[OK] h(B) <= h(N) + c: 19.0 <= 27.0 + 27.0",
            "[OK] h(B) <= h(R) + c: 19.0 <= 56.0 + 57.0",
            "[OK] h(C) <= h(B) + c: 22.0 <= 19.0 + 26.0",
            "[OK] h(C) <= h(D) + c: 22.0 <= 22.0 + 22.0",
            "[OK] h(D) <= h(C) + c: 22.0 <= 22.0 + 22.0",
            "[OK] h(D) <= h(L) + c: 22.0 <= 33.0 + 33.0",
            "[OK] h(D) <= h(R) + c: 22.0 <= 56.0 + 58.0",
            "[OK] h(E) <= h(G) + c: 17.0 <= 14.0 + 26.0",
            "[OK] h(E) <= h(K) + c: 17.0 <= 17.0 + 17.0",
            "[OK] h(E) <= h(P) + c: 17.0 <= 16.0 + 39.0",
            "[OK] h(F) <= h(A) + c: 14.0 <= 7.0 + 14.0",
            "[OK] h(G) <= h(E) + c: 14.0 <= 17.0 + 26.0",
            "[OK] h(G) <= h(Q) + c: 14.0 <= 48.0 + 48.0",
            "[OK] h(G) <= h(U) + c: 14.0 <= 69.0 + 74.0",
            "[OK] h(G) <= h(X) + c: 14.0 <= 14.0 + 14.0",
            "[OK] h(H) <= h(A) + c: 7.0 <= 7.0 + 7.0",
            "[OK] h(H) <= h(B) + c: 7.0 <= 19.0 + 19.0",
            "[OK] h(H) <= h(N) + c: 7.0 <= 27.0 + 29.0",
            "[OK] h(H) <= h(P) + c: 7.0 <= 16.0 + 16.0",
            "[OK] h(H) <= h(S) + c: 7.0 <= 26.0 + 26.0",
            "[OK] h(H) <= h(T) + c: 7.0 <= 28.0 + 28.0",
            "[OK] h(H) <= h(V) + c: 7.0 <= 23.0 + 23.0",
            "[OK] h(H) <= h(Z) + c: 7.0 <= 0.0 + 83.0",
            "[OK] h(I) <= h(N) + c: 32.0 <= 27.0 + 32.0",
            "[OK] h(I) <= h(O) + c: 32.0 <= 34.0 + 34.0",
            "[OK] h(J) <= h(A) + c: 31.0 <= 7.0 + 31.0",
            "[OK] h(J) <= h(P) + c: 31.0 <= 16.0 + 44.0",
            "[OK] h(K) <= h(E) + c: 17.0 <= 17.0 + 17.0",
            "[OK] h(K) <= h(M) + c: 17.0 <= 28.0 + 28.0",
            "[OK] h(K) <= h(N) + c: 17.0 <= 27.0 + 41.0",
            "[OK] h(K) <= h(P) + c: 17.0 <= 16.0 + 38.0",
            "[OK] h(K) <= h(R) + c: 17.0 <= 56.0 + 56.0",
            "[OK] h(L) <= h(D) + c: 33.0 <= 22.0 + 33.0",
            "[OK] h(M) <= h(B) + c: 28.0 <= 19.0 + 29.0",
            "[OK] h(M) <= h(K) + c: 28.0 <= 17.0 + 28.0",
            "[OK] h(M) <= h(N) + c: 28.0 <= 27.0 + 42.0",
            "[OK] h(N) <= h(B) + c: 27.0 <= 19.0 + 27.0",
            "[OK] h(N) <= h(H) + c: 27.0 <= 7.0 + 29.0",
            "[OK] h(N) <= h(I) + c: 27.0 <= 32.0 + 32.0",
            "[OK] h(N) <= h(K) + c: 27.0 <= 17.0 + 41.0",
            "[OK] h(N) <= h(M) + c: 27.0 <= 28.0 + 42.0",
            "[OK] h(O) <= h(I) + c: 34.0 <= 32.0 + 34.0",
            "[OK] h(O) <= h(Y) + c: 34.0 <= 37.0 + 37.0",
            "[OK] h(P) <= h(E) + c: 16.0 <= 17.0 + 39.0",
            "[OK] h(P) <= h(H) + c: 16.0 <= 7.0 + 16.0",
            "[OK] h(P) <= h(J) + c: 16.0 <= 31.0 + 44.0",
            "[OK] h(P) <= h(K) + c: 16.0 <= 17.0 + 38.0",
            "[OK] h(P) <= h(S) + c: 16.0 <= 26.0 + 38.0",
            "[OK] h(P) <= h(W) + c: 16.0 <= 38.0 + 38.0",
            "[OK] h(P) <= h(Y) + c: 16.0 <= 37.0 + 74.0",
            "[OK] h(Q) <= h(G) + c: 48.0 <= 14.0 + 48.0",
            "[OK] h(Q) <= h(V) + c: 48.0 <= 23.0 + 54.0",
            "[OK] h(Q) <= h(W) + c: 48.0 <= 38.0 + 76.0",
            "[OK] h(R) <= h(B) + c: 56.0 <= 19.0 + 57.0",
            "[OK] h(R) <= h(D) + c: 56.0 <= 22.0 + 58.0",
            "[OK] h(R) <= h(K) + c: 56.0 <= 17.0 + 56.0",
            "[OK] h(R) <= h(U) + c: 56.0 <= 69.0 + 69.0",
            "[OK] h(R) <= h(X) + c: 56.0 <= 14.0 + 72.0",
            "[OK] h(R) <= h(Y) + c: 56.0 <= 37.0 + 66.0",
            "[OK] h(S) <= h(H) + c: 26.0 <= 7.0 + 26.0",
            "[OK] h(S) <= h(P) + c: 26.0 <= 16.0 + 38.0",
            "[OK] h(T) <= h(H) + c: 28.0 <= 7.0 + 28.0",
            "[OK] h(U) <= h(G) + c: 69.0 <= 14.0 + 74.0",
            "[OK] h(U) <= h(R) + c: 69.0 <= 56.0 + 69.0",
            "[OK] h(V) <= h(H) + c: 23.0 <= 7.0 + 23.0",
            "[OK] h(V) <= h(Q) + c: 23.0 <= 48.0 + 54.0",
            "[OK] h(W) <= h(P) + c: 38.0 <= 16.0 + 38.0",
            "[OK] h(W) <= h(Q) + c: 38.0 <= 48.0 + 76.0",
            "[OK] h(X) <= h(G) + c: 14.0 <= 14.0 + 14.0",
            "[OK] h(X) <= h(R) + c: 14.0 <= 56.0 + 72.0",
            "[OK] h(Y) <= h(O) + c: 37.0 <= 34.0 + 37.0",
            "[OK] h(Y) <= h(P) + c: 37.0 <= 16.0 + 74.0",
            "[OK] h(Y) <= h(R) + c: 37.0 <= 56.0 + 66.0",
            "[OK] h(Z) <= h(H) + c: 0.0 <= 7.0 + 83.0"
          ]
        }
      },
      "name": "HEURISTIC-CONSISTENT test_case_2_heuristic.txt"
    },
    {
      "description": "Test for checking if test_case_2_heuristic_nonopt.txt heuristic is consistent",
      "execution_args": "--ss test_case_2.txt --h test_case_2_heuristic_nonopt.txt --check-consistent ",
      "expected_output_fields": {
        "CONCLUSION": {
          "match": "exact",
          "value": "Heuristic is not consistent."
        },
        "CONDITIONS": {
          "match": "contained",
          "value": [
            "[ERR] h(A) <= h(F) + c: 41.0 <= 4.0 + 14.0",
            "[OK] h(A) <= h(H) + c: 41.0 <= 85.0 + 7.0",
            "[OK] h(A) <= h(J) + c: 41.0 <= 61.0 + 31.0",
            "[ERR] h(B) <= h(C) + c: 50.0 <= 18.0 + 26.0",
            "[OK] h(B) <= h(H) + c: 50.0 <= 85.0 + 19.0",
            "[OK] h(B) <= h(M) + c: 50.0 <= 43.0 + 29.0",
            "[OK] h(B) <= h(N) + c: 50.0 <= 35.0 + 27.0",
            "[OK] h(B) <= h(R) + c: 50.0 <= 79.0 + 57.0",
            "[OK] h(C) <= h(B) + c: 18.0 <= 50.0 + 26.0",
            "[OK] h(C) <= h(D) + c: 18.0 <= 65.0 + 22.0",
            "[ERR] h(D) <= h(C) + c: 65.0 <= 18.0 + 22.0",
            "[ERR] h(D) <= h(L) + c: 65.0 <= 27.0 + 33.0",
            "[OK] h(D) <= h(R) + c: 65.0 <= 79.0 + 58.0",
            "[OK] h(E) <= h(G) + c: 38.0 <= 94.0 + 26.0",
            "[OK] h(E) <= h(K) + c: 38.0 <= 43.0 + 17.0",
            "[OK] h(E) <= h(P) + c: 38.0 <= 84.0 + 39.0",
            "[OK] h(F) <= h(A) + c: 4.0 <= 41.0 + 14.0",
            "[ERR] h(G) <= h(E) + c: 94.0 <= 38.0 + 26.0",
            "[OK] h(G) <= h(Q) + c: 94.0 <= 82.0 + 48.0",
            "[OK] h(G) <= h(U) + c: 94.0 <= 81.0 + 74.0",
            "[ERR] h(G) <= h(X) + c: 94.0 <= 43.0 + 14.0",
            "[ERR] h(H) <= h(A) + c: 85.0 <= 41.0 + 7.0",
            "[ERR] h(H) <= h(B) + c: 85.0 <= 50.0 + 19.0",
            "[ERR] h(H) <= h(N) + c: 85.0 <= 35.0 + 29.0",
            "[OK] h(H) <= h(P) + c: 85.0 <= 84.0 + 16.0",
            "[ERR] h(H) <= h(S) + c: 85.0 <= 43.0 + 26.0",
            "[ERR] h(H) <= h(T) + c: 85.0 <= 19.0 + 28.0",
            "[ERR] h(H) <= h(V) + c: 85.0 <= 59.0 + 23.0",
            "[ERR] h(H) <= h(Z) + c: 85.0 <= 0.0 + 83.0",
            "[OK] h(I) <= h(N) + c: 26.0 <= 35.0 + 32.0",
            "[OK] h(I) <= h(O) + c: 26.0 <= 42.0 + 34.0",
            "[OK] h(J) <= h(A) + c: 61.0 <= 41.0 + 31.0",
            "[OK] h(J) <= h(P) + c: 61.0 <= 84.0 + 44.0",
            "[OK] h(K) <= h(E) + c: 43.0 <= 38.0 + 17.0",
            "[OK] h(K) <= h(M) + c: 43.0 <= 43.0 + 28.0",
            "[OK] h(K) <= h(N) + c: 43.0 <= 35.0 + 41.0",
            "[OK] h(K) <= h(P) + c: 43.0 <= 84.0 + 38.0",
            "[OK] h(K) <= h(R) + c: 43.0 <= 79.0 + 56.0",
            "[OK] h(L) <= h(D) + c: 27.0 <= 65.0 + 33.0",
            "[OK] h(M) <= h(B) + c: 43.0 <= 50.0 + 29.0",
            "[OK] h(M) <= h(K) + c: 43.0 <= 43.0 + 28.0",
            "[OK] h(M) <= h(N) + c: 43.0 <= 35.0 + 42.0",
            "[OK] h(N) <= h(B) + c: 35.0 <= 50.0 + 27.0",
            "[OK] h(N) <= h(H) + c: 35.0 <= 85.0 + 29.0",
            "[OK] h(N) <= h(I) + c: 35.0 <= 26.0 + 32.0",
            "[OK] h(N) <= h(K) + c: 35.0 <= 43.0 + 41.0",
            "[OK] h(N) <= h(M) + c: 35.0 <= 43.0 + 42.0",
            "[OK] h(O) <= h(I) + c: 42.0 <= 26.0 + 34.0",
            "[OK] h(O) <= h(Y) + c: 42.0 <= 65.0 + 37.0",
            "[ERR] h(P) <= h(E) + c: 84.0 <= 38.0 + 39.0",
            "[OK] h(P) <= h(H) + c: 84.0 <= 85.0 + 16.0",
            "[OK] h(P) <= h(J) + c: 84.0 <= 61.0 + 44.0",
            "[ERR] h(P) <= h(K) + c: 84.0 <= 43.0 + 38.0",
            "[ERR] h(P) <= h(S) + c: 84.0 <= 43.0 + 38.0",
            "[OK] h(P) <= h(W) + c: 84.0 <= 80.0 + 38.0",
            "[OK] h(P) <= h(Y) + c: 84.0 <= 65.0 + 74.0",
            "[OK] h(Q) <= h(G) + c: 82.0 <= 94.0 + 48.0",
            "[OK] h(Q) <= h(V) + c: 82.0 <= 59.0 + 54.0",
            "[OK] h(Q) <= h(W) + c: 82.0 <= 80.0 + 76.0",
            "[OK] h(R) <= h(B) + c: 79.0 <= 50.0 + 57.0",
            "[OK] h(R) <= h(D) + c: 79.0 <= 65.0 + 58.0",
            "[OK] h(R) <= h(K) + c: 79.0 <= 43.0 + 56.0",
            "[OK] h(R) <= h(U) + c: 79.0 <= 81.0 + 69.0",
            "[OK] h(R) <= h(X) + c: 79.0 <= 43.0 + 72.0",
            "[OK] h(R) <= h(Y) + c: 79.0 <= 65.0 + 66.0",
            "[OK] h(S) <= h(H) + c: 43.0 <= 85.0 + 26.0",
            "[OK] h(S) <= h(P) + c: 43.0 <= 84.0 + 38.0",
            "[OK] h(T) <= h(H) + c: 19.0 <= 85.0 + 28.0",
            "[OK] h(U) <= h(G) + c: 81.0 <= 94.0 + 74.0",
            "[OK] h(U) <= h(R) + c: 81.0 <= 79.0 + 69.0",
            "[OK] h(V) <= h(H) + c: 59.0 <= 85.0 + 23.0",
            "[OK] h(V) <= h(Q) + c: 59.0 <= 82.0 + 54.0",
            "[OK] h(W) <= h(P) + c: 80.0 <= 84.0 + 38.0",
            "[OK] h(W) <= h(Q) + c: 80.0 <= 82.0 + 76.0",
            "[OK] h(X) <= h(G) + c: 43.0 <= 94.0 + 14.0",
            "[OK] h(X) <= h(R) + c: 43.0 <= 79.0 + 72.0",
            "[OK] h(Y) <= h(O) + c: 65.0 <= 42.0 + 37.0",
            "[OK] h(Y) <= h(P) + c: 65.0 <= 84.0 + 74.0",
            "[OK] h(Y) <= h(R) + c: 65.0 <= 79.0 + 66.0",
            "[OK] h(Z) <= h(H) + c: 0.0 <= 85.0 + 83.0"
          ]
        }
      },
      "name": "HEURISTIC-CONSISTENT test_case_2_heuristic_nonopt.txt"
    }
  ],
  "HEURISTIC-OPTIMISTIC": [
    {
      "description": "Test for checking if test_case_2_heuristic.txt heuristic is optimistic",
      "execution_args": "--ss test_case_2.txt --h test_case_2_heuristic.txt --check-optimistic ",
      "expected_output_fields": {
        "CONCLUSION": {
          "match": "exact",
          "value": "Heuristic is optimistic."
        },
        "CONDITIONS": {
          "match": "contained",
          "value": [
            "[OK] h(A) <= h*: 7.0 <= 90.0",
            "[OK] h(B) <= h*: 19.0 <= 102.0",
            "[OK] h(C) <= h*: 22.0 <= 128.0",
            "[OK] h(D) <= h*: 22.0 <= 150.0",
            "[OK] h(E) <= h*: 17.0 <= 138.0",
            "[OK] h(F) <= h*: 14.0 <= 104.0",
            "[OK] h(G) <= h*: 14.0 <= 164.0",
            "[OK] h(H) <= h*: 7.0 <= 83.0",
            "[OK] h(I) <= h*: 32.0 <= 144.0",
            "[OK] h(J) <= h*: 31.0 <= 121.0",
            "[OK] h(K) <= h*: 17.0 <= 137.0",
            "[OK] h(L) <= h*: 33.0 <= 183.0",
            "[OK] h(M) <= h*: 28.0 <= 131.0",
            "[OK] h(N) <= h*: 27.0 <= 112.0",
            "[OK] h(O) <= h*: 34.0 <= 178.0",
            "[OK] h(P) <= h*: 16.0 <= 99.0",
            "[OK] h(Q) <= h*: 48.0 <= 160.0",
            "[OK] h(R) <= h*: 56.0 <= 159.0",
            "[OK] h(S) <= h*: 26.0 <= 109.0",
            "[OK] h(T) <= h*: 28.0 <= 111.0",
            "[OK] h(U) <= h*: 69.0 <= 228.0",
            "[OK] h(V) <= h*: 23.0 <= 106.0",
            "[OK] h(W) <= h*: 38.0 <= 137.0",
            "[OK] h(X) <= h*: 14.0 <= 178.0",
            "[OK] h(Y) <= h*: 37.0 <= 173.0",
            "[OK] h(Z) <= h*: 0.0 <= 0.0"
          ]}
      },
      "name": "HEURISTIC-OPTIMISTIC test_case_2_heuristic.txt"
    },
    {
      "description": "Test for checking if test_case_2_heuristic_nonopt.txt heuristic is optimistic",
      "execution_args": "--ss test_case_2.txt --h test_case_2_heuristic_nonopt.txt --check-optimistic ",
      "expected_output_fields": {
        "CONCLUSION": {
          "match": "exact",
          "value": "Heuristic is not optimistic."
        },
        "CONDITIONS": {
          "match": "contained",
          "value": [
            "[OK] h(A) <= h*: 41.0 <= 90.0",
            "[OK] h(B) <= h*: 50.0 <= 102.0",
            "[OK] h(C) <= h*: 18.0 <= 128.0",
            "[OK] h(D) <= h*: 65.0 <= 150.0",
            "[OK] h(E) <= h*: 38.0 <= 138.0",
            "[OK] h(F) <= h*: 4.0 <= 104.0",
            "[OK] h(G) <= h*: 94.0 <= 164.0",
            "[ERR] h(H) <= h*: 85.0 <= 83.0",
            "[OK] h(I) <= h*: 26.0 <= 144.0",
            "[OK] h(J) <= h*: 61.0 <= 121.0",
            "[OK] h(K) <= h*: 43.0 <= 137.0",
            "[OK] h(L) <= h*: 27.0 <= 183.0",
            "[OK] h(M) <= h*: 43.0 <= 131.0",
            "[OK] h(N) <= h*: 35.0 <= 112.0",
            "[OK] h(O) <= h*: 42.0 <= 178.0",
            "[OK] h(P) <= h*: 84.0 <= 99.0",
            "[OK] h(Q) <= h*: 82.0 <= 160.0",
            "[OK] h(R) <= h*: 79.0 <= 159.0",
            "[OK] h(S) <= h*: 43.0 <= 109.0",
            "[OK] h(T) <= h*: 19.0 <= 111.0",
            "[OK] h(U) <= h*: 81.0 <= 228.0",
            "[OK] h(V) <= h*: 59.0 <= 106.0",
            "[OK] h(W) <= h*: 80.0 <= 137.0",
            "[OK] h(X) <= h*: 43.0 <= 178.0",
            "[OK] h(Y) <= h*: 65.0 <= 173.0",
            "[OK] h(Z) <= h*: 0.0 <= 0.0"
          ]}
      },
      "name": "HEURISTIC-OPTIMISTIC test_case_2_heuristic_nonopt.txt"
    }
  ],
  "UCS": [
    {
      "description": "Test for UCS on test_case_2.txt state space",
      "execution_args": "--ss test_case_2.txt --alg ucs",
      "expected_output_fields": {
        "FOUND_SOLUTION": {
          "match": "exact",
          "value": "yes"
        },
        "PATH": {
          "match": "ignored",
          "value": "A => H => Z"
        },
        "PATH_LENGTH": {
          "match": "ignored",
          "value": "3"
        },
        "STATES_VISITED": {
          "match": "ignored",
          "value": "21"
        },
        "TOTAL_COST": {
          "match": "exact",
          "value": "90.0"
        }
      },
      "name": "UCS"
    }
  ]
}